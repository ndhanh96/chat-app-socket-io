{"version":3,"sources":["features/usersSlice.js","features/Home.js","features/Chat.js","App.js","app/store.js","index.js"],"names":["usersSlice","createSlice","name","initialState","reducers","setName","state","action","payload","actions","Users","useState","username","setUserName","history","useHistory","useSelector","users","dispatch","useDispatch","className","onSubmit","e","preventDefault","push","value","onChange","target","placeholder","socket","io","Chat","myMsg","setmyMsg","receivemsg","SetReceivemsg","chatmsg","setChatmsg","msgview","useRef","on","arg","useEffect","length","oldmsg","hashName","current","scrollIntoView","console","log","map","msg","ref","id","emit","Date","parse","type","App","exact","path","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"mNAEaA,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAAc,CACZD,KAAM,IAERE,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfD,EAAMJ,KAAOK,EAAOC,YAKXH,EAAYL,EAAWS,QAAvBJ,QACAL,IAAf,Q,OCDe,SAASU,IAAS,IAAD,EACEC,mBAAS,IADX,mBACvBC,EADuB,KACbC,EADa,KAExBC,EAAUC,cACVb,EAAOc,aAAY,SAACV,GAAD,OAAWA,EAAMW,MAAMf,QAC1CgB,EAAWC,cAMjB,OAJIjB,IAASU,GACXM,EAASb,EAAQ,KAIjB,sBAAKe,UAAU,eAAf,UAEE,uBACEC,SAAU,SAACC,GACTA,EAAEC,iBACFL,EAASb,EAAQO,IACjBE,EAAQU,KAAK,UAEfJ,UAAU,gBANZ,UAQE,wDACA,uBAAOA,UAAU,YAAYK,MAAOb,EAAUc,SAAU,SAACJ,GAAD,OAAOT,EAAYS,EAAEK,OAAOF,QAAQG,YAAY,8BAEzG1B,K,4BChCD2B,G,OAASC,aAAG,2BAEH,SAASC,IAAQ,IAAD,EACHpB,mBAAS,IADN,mBACtBqB,EADsB,KACfC,EADe,OAEOtB,mBAAS,IAFhB,mBAEtBuB,EAFsB,KAEVC,EAFU,OAGCxB,mBAAS,IAHV,mBAGtByB,EAHsB,KAGbC,EAHa,KAIvBC,EAAWC,iBAAO,MAClBrC,EAAOc,aAAY,SAACV,GAAD,OAAWA,EAAMW,MAAMf,QAC1CY,EAAUC,cAEXb,GACHY,EAAQU,KAAK,KA0Bf,OAnBAK,EAAOW,GAAG,cAAc,SAACC,GAEvBN,EAAcM,MAGhBC,qBAAU,WACJR,EAAWS,OAAS,GACtBN,GAAW,SAACO,GAAD,4BAAgBA,GAAhB,CAAwBV,SAEpC,CAACA,IAEJQ,qBAAU,WACR,GAAIN,EAAQO,OAAS,EAAG,CACtB,IAAIE,EAAWT,EAAQA,EAAQO,OAAS,GAAG,GAhB7CL,EAAQQ,QAAQC,iBAkBdC,QAAQC,IAAIJ,MAEb,CAACT,IAGF,sBAAKhB,UAAU,UAAf,UACE,uDAA0BlB,KAC1B,6BACsB,IAAnBkC,EAAQO,OACLP,EAAQc,KAAI,SAACC,GAAD,OACV,qBAAIC,IAAKd,EAASe,GAAIF,EAAI,GAA1B,UACG,IACD,sBAAM/B,UAAU,SAAhB,SAA0B+B,EAAI,KAFhC,gBAEiDA,EAAI,MAFlBA,EAAI,OAKzC,KAGN,uBACE9B,SAAU,SAACC,GACTA,EAAEC,iBACES,IACFH,EAAOyB,KAAK,aAAc,CAAEpD,KAAMA,EAAMiD,IAAKnB,IAC7CK,GAAW,SAACO,GAAD,4BACNA,GADM,CAET,CAAC1C,EAAM8B,EAAOuB,KAAKC,MAAM,IAAID,aAGjCtB,EAAS,KAVb,UAaE,uBACIR,MAAOO,EACTN,SAAU,SAACJ,GAAD,OAAOW,EAASX,EAAEK,OAAOF,UAErC,wBAAQgC,KAAK,SAAb,wBC9COC,MAjBf,WACE,OACE,cAAC,IAAD,UACE,qBAAKtC,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,EAAD,cCjBGC,cAAe,CAC5BC,QAAS,CACP7C,MAAOjB,KCCX+D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,U","file":"static/js/main.7a11befe.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    name: '',\n  },\n  reducers: {\n    setName: (state, action) => {\n      state.name = action.payload;\n    },\n  },\n});\n\nexport const { setName } = usersSlice.actions;\nexport default usersSlice.reducer;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n} from 'react-router-dom';\nimport '../style/Home.scss'\n\nimport { setName } from './usersSlice';\n\nexport default function Users() {\n  const [username, setUserName] = useState('');\n  const history = useHistory();\n  const name = useSelector((state) => state.users.name);\n  const dispatch = useDispatch();\n\n  if (name && !username) {\n    dispatch(setName(''));\n  }\n\n  return (\n    <div className='nameInputBox'>\n      \n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          dispatch(setName(username));\n          history.push('/chat');\n        }}\n        className='nameInputForm'\n      >\n        <h1>Type your name to chat</h1>\n        <input className='nameInput' value={username} onChange={(e) => setUserName(e.target.value)} placeholder='your name goes here...'/>\n      </form>\n      {name}\n    </div>\n  );\n}\n","import axios from 'axios';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { io } from 'socket.io-client';\nimport '../style/Chat.scss';\nconst socket = io('https://randomass.xyz/');\n\nexport default function Chat() {\n  const [myMsg, setmyMsg] = useState('');\n  const [receivemsg, SetReceivemsg] = useState([]);\n  const [chatmsg, setChatmsg] = useState([]);\n  const msgview  = useRef(null);\n  const name = useSelector((state) => state.users.name);\n  const history = useHistory();\n\n  if (!name) {\n    history.push('/');\n  }\n\n  const scrollToMsg = () => {\n    msgview.current.scrollIntoView();\n  };\n\n  socket.on('serverSent', (arg) => {\n    // console.log(arg)\n    SetReceivemsg(arg);\n  });\n\n  useEffect(() => {\n    if (receivemsg.length > 0) {\n      setChatmsg((oldmsg) => [...oldmsg, receivemsg]);\n    }\n  }, [receivemsg]);\n\n  useEffect(() => {\n    if (chatmsg.length > 0) {\n      let hashName = chatmsg[chatmsg.length - 1][2];\n      scrollToMsg();\n      console.log(hashName);\n    } \n  }, [chatmsg]);\n\n  return (\n    <div className='chatBox'>\n      <h1>Welcome to chat room {name}</h1>\n      <ul>\n        {chatmsg.length !== 0\n          ? chatmsg.map((msg) => (\n              <li ref={msgview} id={msg[2]} key={msg[2]}>\n                {' '}\n                <span className='sender'>{msg[0]}</span> {`: ${msg[1]}`}\n              </li>\n            ))\n          : ''}\n      </ul>\n\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          if (myMsg) {\n            socket.emit('clientSent', { name: name, msg: myMsg });\n            setChatmsg((oldmsg) => [\n              ...oldmsg,\n              [name, myMsg, Date.parse(new Date())],\n            ]);\n          }\n          setmyMsg('');\n        }}\n      >\n        <input\n            value={myMsg}\n          onChange={(e) => setmyMsg(e.target.value)}\n        />\n        <button type='submit'>Send</button>\n      </form>\n    </div>\n  );\n}\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nimport Home from \"./features/Home\";\nimport Chat from './features/Chat'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/chat\">\n            <Chat />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport usersSlice from '../features/usersSlice';\n\nexport default configureStore({\n  reducer: {\n    users: usersSlice\n  }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}